#!/bin/bash

# forester is for when you have multiple branches off develop and you want to see where you stand amongst them
#
# you can bypass this script by doing:

# for branch in (topic/a topic/b wip/c); do
#   git log --stat --since=3days $branch >> /tmp/forester.txt \
#   && echo -e "\n\n=============\n$branch\n=============\n\n" >> /tmp/forester.txt
# done

# with the script, I just do `forester -b"topic wip"`
usage()
{
    cat <<- EOT

Usage: $0 [options] [--]

Options:
-h|help             Display this message
-d|days             Number days to go back -- defaults to 3
-o|outfile          Defaults to /tmp/forester.txt
-b|branch-prefix    Use -b"feature topic wip" to include branches beginning with those prefixes

EOT
}

while getopts ":hb:o:d:" opt
do
    case $opt in
        h|help          )  usage; exit 0;;
        d|days          )  DAYS=$OPTARG;;
        o|outfile       )  OUTFILE=$OPTARG;;
        b|branch-prefix )  BRANCH_PREFIX="$OPTARG";;
        \?              )  echo -e "\n  Option noexists : $OPTARG\n"; usage; exit 1;;
    esac
done
shift $(($OPTIND-1))

# how many days back?
DAYS=${DAYS:-"3"}

# what branches do you want to grab recent logs from?
BRANCH_PREFIX=${BRANCH_PREFIX:-feature}
OUTFILE=${OUTFILE:-"/tmp/forester.txt"}

echo "seeing the forest for the trees"
# fail if outside a git repository
git branch 1>/dev/null || { echo "you must be in a repository" ; exit 1 ;}

ARGS=
i=0
# loop thru git branches, adding to array (as ARGS[$i]) if we match a branch prefix
for branch in ${BRANCH_PREFIX[*]}; do
    ARGS[$i]=$(git branch | cut -c'3-' | grep "^$branch")
    if [ $? == 0 ]; then
        i=$((i+1))
    fi
done

if [ ${#ARGS} == 0 ]; then
{ echo "No branches matching $BRANCH_PREFIX" ; usage; exit 1 ;}
fi

# draw command for each branch we are logging
printline()
{
    echo
    printhrule $log
    echo $log
    printhrule $log
    echo
    git log --stat --pretty=oneline --since=${DAYS}days $1
}

# echo number of `=' according to length of string we {under,over}line
printhrule()
{
    for j in `seq 1 ${#1}`
    do
        echo -n =
    done
    # adds a line break
    echo 
}

for log in ${ARGS[*]}
do
    printline "$log" >> $OUTFILE
done

echo "appended $i log entries to $OUTFILE"
exit 0
